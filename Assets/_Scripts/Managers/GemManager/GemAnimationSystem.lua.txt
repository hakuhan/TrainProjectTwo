local util = require 'xlua.util'

local GemAnimationSystem = Class("GemAnimationSystem", UnityObjectClass)

GemAnimationSystem.cs_coroutine_runner = nil

function GemAnimationSystem:Init()
    self.cs_coroutine_runner = self.m_object:AddComponent(typeof(CS.XLuaTest.Coroutine_Runner))
end

-- 顺序播放下落动画
function GemAnimationSystem:FallGemWithSequence(lsGems, iInteral)
    if lsGems == nil then
        return
    end
    self.cs_coroutine_runner:StartCoroutine(self:SequenceFallAsync(lsGems, iInteral))
end

-- 乱序下落动画
function GemAnimationSystem:FallGemOutOfOrder(lsGems, iDuration)
    if lsGems == nil then
        return
    end
    self.cs_coroutine_runner:StartCoroutine(self:OurOffOrderFallAsync(lsGems, iDuration))
end

-- 乱序
function GemAnimationSystem:OurOffOrderFallAsync(lsGems, iDuration)
    return util.cs_generator(function()
        coroutine.yield(Unity.WaitForSeconds(iDuration))

        for k, v in pairs(lsGems) do
            v["gem"]:MoveToTargetPosition(v["v3Position"], -1)
        end
    end)
end


-- 有序
function GemAnimationSystem:SequenceFallAsync(lsGems, iInteral)
    return util.cs_generator(function()
        for k, v in pairs(lsGems) do
            coroutine.yield(Unity.WaitForSeconds(iInteral))
            v["gem"]:MoveToTargetPosition(v["v3Position"], -1)
        end
    end)
end

return GemAnimationSystem
--[[    create by baihan 2020.02.25 
    宝石的管理类 
--]]
local GemRelationSystem = require("Managers.GemManager.GemRelationSystem")
local GemAnimationSystem = require("Managers.GemManager.GemAnimationSystem")
local GemLineManager = require("Managers.GemManager.GemLineManager")

local GemManager = Class("GemManager", UnityObjectClass)
local Gem = require("Items.Gem")

-- sub system
GemManager.m_scrGemAnimationSystem = nil
GemManager.m_scrGemRalationSystem = nil
GemManager.m_scrGemLineManger = nil

-- gem容器
GemManager.m_lsGems = {}
GemManager.m_scrGemRalationSystem = nil
-- 宝石移动时间
GemManager.m_iGemMoveTime = 0.3


function GemManager:Init(iGemGroup)
    self.m_scrGemRalationSystem = GemRelationSystem.New()
    self.m_scrGemAnimationSystem = GemAnimationSystem.New(self.m_object)
    self.m_scrGemLineManger = GemLineManager.New(self.m_object)
    self.m_scrGemLineManger:UpdateLineInfo(iGemGroup)
end

-- 通过随机概率生成宝石
function GemManager:CreateGem(tbGemPositionData, iGroupDeep)
    self.m_scrGemLineManger:UpdateLineInfo(iGroupDeep)
    for iGroupId, lsPositions in pairs(tbGemPositionData) do
        for i, v3Position in pairs(lsPositions) do
            local scrGem = self.m_scrGemLineManger:GetGem(iGroupId)

            table.insert(self.m_lsGems, scrGem)
            self.m_scrGemLineManger:UpdateLineInfo(iGroupDeep)
        end
    end
    
end

-- 清理所有gem
function GemManager:ClearAllGem()
    for k, v in pairs(self.m_lsGems) do
        Udestroy(v.m_object)
    end
    self.m_lsGems = {}
end

-- 移动所有宝石{0:{"iIndex":0, "v3Position":(0, 0, 0), "iGroupCount": 4, "iDistance":10}}
function GemManager:GetAllGemMoveInfo(lsDeepPosition, bPlaced)
    local iTime = 0
    local lsGemDown = {}

    for iGroupId, iDeepInfo in pairs(lsDeepPosition) do
        local iDeepIndex = iDeepInfo["iIndex"]
        local v3DeepPosition = iDeepInfo["v3Position"]
        local iGroupCount = iDeepInfo["iGroupCount"]
        local iStepDistance = iDeepInfo["iDistance"]

        local iMoveCount = iGroupCount - iDeepIndex + 1
        if iMoveCount >= 1 then
            local iFindIndex = 0
            for iGemIndex, gem in pairs(self.m_lsGems) do
                if gem.m_bPlaced == bPlaced and gem.m_iGroup == iGroupId and gem.m_iGroupIndex > iDeepIndex + iFindIndex then
                    local v3TargetPosition = v3DeepPosition + Uvec3(0, iStepDistance * iFindIndex, 0)
                    table.insert(lsGemDown, {["gem"] = gem, ["v3Position"] = v3TargetPosition, ["iRaw"] = iDeepIndex + iFindIndex })
                    iFindIndex = iFindIndex + 1
                end
            end
        end

    end

    if #lsGemDown > 0 then
        iTime = #lsGemDown * Utime.deltaTime + 0.5
    end

    return lsGemDown, iTime
end

-- 移动所有gem
function GemManager:MoveAllGem(lsGemInfo)
    for k, tbGem in pairs(lsGemInfo) do
        local gem = tbGem["gem"]
        gem.m_iGroupIndex = tbGem["iRaw"]
        gem.m_bPlaced = true
    end
    self.m_scrGemAnimationSystem:FallGemOutOfOrder(lsGemInfo, 0.1)
    -- self.m_scrGemAnimationSystem:FallGemWithSequence(lsGemInfo, 0.1)
end

-- 得到所有点的位置
function GemManager:GetAllGemPosition(bPlaced)
    local lsResult = {}
    for k, v in pairs(self.m_lsGems) do
        if v.m_bPlaced == bPlaced then
            table.insert(lsResult, {["iGroup"] = v.m_iGroup, ["iRaw"] = v.m_iGroupIndex })
        end
    end

    return lsResult
end

-- 得到连成线的宝石(线的最小数量) 返回{"eGemType":{indexs:{v2}}}
function GemManager:GetLinkedGemIndex(iMinCount)
    return self.m_scrGemRalationSystem:GetLinkedGemIndex(iMinCount, self.m_lsGems)
end

-- 得到宝石
function GemManager:GetDiamond()
    return self.m_scrGemRalationSystem:GetDiamond(self.m_lsGems, "Diamond")
end

-- 连线所有Gem
function GemManager:LinkGem(lsGem)
    for i = 1, #lsGem do
        local iGemId = self.m_scrGemRalationSystem:GetGemIndexById(lsGem[i], self.m_lsGems)
        local gem = table.remove(self.m_lsGems, iGemId)
        gem:DestoryWithAnimation(0.3)
    end
end

-- 消除宝石
function GemManager:DisapearGem(scrGem)
    local iIndex = self.m_scrGemRalationSystem:GetGemIndexById(scrGem.m_iId, self.m_lsGems)
    if iIndex > 0 then
        local gem = table.remove(self.m_lsGems, iIndex)
        gem:DestoryWithAnimation(0.3)
    end
end

return GemManager
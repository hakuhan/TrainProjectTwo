--[[    create by baihan 2020.02.25 
    地图的管理类 
--]]
local MapManager = Class("MapManager", UnityObjectClass)

local WallLine = require("Items.WallLine")
local m_strMapLinePath = PrefabPath .. "WallLine"

-- 线的单位距离
local m_iWallLineDistance = 10
-- 地图组件的最小数量
local m_iWallItemBaseCount = 4

-- 地图上安放宝石的组
MapManager.m_tbPointGroups = {}

-- 地图的线
MapManager.m_lines = {
    ["horizotal"] = {},
    ["vertical"] = {}
}

function MapManager:Init()
    self.m_v3FirstPoint = self.m_transform:Find("FirstPoint").position
    self.m_objWallLinePref = Uload(m_strMapLinePath)
    self.m_v3StartShowPosition = self.m_transform:Find("StartShowPoint").position
end

function MapManager:UpdateMap(iLevel)
    self.m_iMapLevel = iLevel
    self:UpdateMapLine(iLevel, m_iWallItemBaseCount, m_iWallLineDistance)
    self:UpdateMapGroups(iLevel, m_iWallItemBaseCount, m_iWallLineDistance)

    -- PrintTable(self.m_tbPointGroups)
end

-- 更新地图的线
function MapManager:UpdateMapLine(iLevel, iBaseCount, iBaseDistance)
    local ilineCount = iBaseCount + iLevel

    -- clear
    ClearLine(self.m_lines["horizontal"])
    ClearLine(self.m_lines["vertical"])

    -- horizontal and vertical line
    for i = 1, ilineCount do
        local v3HoriLinePosition = self.m_v3FirstPoint + Uvec3(0, iBaseDistance * (i - 1), 0);
        local v3VerLinePosition = self.m_v3FirstPoint + Uvec3(iBaseDistance * (i - 1), 0, 0)

        local objHorWallLine = Uinstantiate(self.m_objWallLinePref, v3HoriLinePosition, UQuaternion.identity, self.m_transform)
        local objVerWallLine = Uinstantiate(self.m_objWallLinePref, v3VerLinePosition, UQuaternion.identity, self.m_transform)

        local scrHorWallLine = WallLine.New(objHorWallLine, iBaseDistance * (ilineCount - 1), true)
        local scrVerWallLine = WallLine.New(objVerWallLine, iBaseDistance * (ilineCount - 1), false)

        table.insert(self.m_lines["horizotal"], scrHorWallLine)
        table.insert(self.m_lines["vertical"], scrVerWallLine)
    end

end

-- 清理表里面的线及其gameObject
function ClearLine(tbLine)
    if tbLine == nil or #tbLine == 0 then
        tbLine = {}
        return
    end

    for i, v in ipairs(tbLine) do
        Udestroy(v.m_object)
    end

    tbLine = {}
end

-- 更新地图的存放点组
function MapManager:UpdateMapGroups(iLevel, iBaseCount, iBaseDistance)
    local iGroupCount = iBaseCount + iLevel - 1
    local iHalfDistance = iBaseDistance / 2

    for i = 1, iGroupCount do
        local tbGroup = {}
        for j = 1, iGroupCount do
            local v3Position = self.m_v3FirstPoint +
            Uvec3((i - 1) * iBaseDistance + iHalfDistance, (j - 1) * iBaseDistance + iHalfDistance, 0)

            local tbGroupItem = {}
            tbGroupItem["bFill"] = false
            tbGroupItem["v3Position"] = v3Position

            -- Test
            -- local objTest = Unity.GameObject(i..j)
            -- objTest.transform.position = v3Position
            table.insert(tbGroup, tbGroupItem)
        end

        self.m_tbPointGroups[i] = tbGroup
    end
end

-- 返回iGroup组的iItemIndex的坐标
function MapManager:GetPosition(iGroup, iItemIndex)
    local tbGroup = self.m_tbPointGroups[iGroup];
    local tbItem = tbGroup[iItemIndex]

    return tbItem["v3Position"]
end

-- 得到没有填满的组
function MapManager:GetAllNotFullGroup()
    local tbResult = {}
    for i, v in ipairs(self.m_tbPointGroups) do
        local tbCurrentGroupDeepItem, index = self:GetDeepPoint(i)
        if tbCurrentGroupDeepItem ~= nil then
            tbResult[i] = {["tbItemData"] = tbCurrentGroupDeepItem, ["iGroupIndex"] = index }
        end
    end

    return tbResult
end

-- 得到没有填满的组的下标和数据
function MapManager:GetAllNotFullGroupIndexese(bTopIndex)
    local tbResult = {}
    for i = 1, #self.m_tbPointGroups do
        for k, v in pairs(self.m_tbPointGroups[i]) do
            if not v["bFill"] then
                if tbResult[i] == nil then
                    tbResult[i] = {}
                end
                local v3Position = Uvec3(v["v3Position"].x, v["v3Position"].y, v["v3Position"].z)
                if bTopIndex then
                    v3Position.y = self.m_v3StartShowPosition.y
                end
                table.insert(tbResult[i], v3Position)
            end
        end
    end

    return tbResult
end

-- 得到每一组创建宝石的位置
function MapManager:GetGroupCreatePosition(iGroup)
    local tbGroup = self.m_tbPointGroups[iGroup];
    local v3Result = tbGroup[1]["v3Position"]
    v3Result.y = self.m_v3StartShowPosition.y
end

-- 得到对应下标的位置
function MapManager:GetPoint(iGroup, iItemIndex)
    local v3Result = nil
    local tbGroup = self.m_tbPointGroups[iGroup];
    local tbItem = tbGroup[iItemIndex]

    if not tbItem["bFill"] then
        v3Result = tbItem["v3Position"]
    end

    return v3Result
end

-- 填充iGroup组的iItemIndex位置（1为最下的位置）
function MapManager:FillPoint(iGroup, iItemIndex)
    local tbGroup = self.m_tbPointGroups[iGroup];
    local tbItem = tbGroup[iItemIndex]
    tbItem["bFill"] = true
end

-- 得到当前组所有为空的点
function MapManager:GetFreePoints(iGroup)
    local tbFreeCount = {}
    for i, v in ipairs(self.m_tbPointGroups[iGroup]) do
        if not v["bFill"] then
            tbFreeCount[i] = v
        end
    end

    return tbFreeCount
end

-- 得到每组最上面的位置
function MapManager:GetAllGroupDeepPosition()
    local tbPositions = {}
    for groupIndex, group in ipairs(self.m_tbPointGroups) do
        local tbDeepInfo = {}
        local iDeepIndex = #group + 1
        local v3CurrentGroupDeepPoint = Uvec3(group[1]["v3Position"].x, self.m_v3StartShowPosition.y, self.m_v3StartShowPosition.z)

        for iGroupItemIndex, tbItem in ipairs(group) do
            if not tbItem["bFill"] and iDeepIndex > iGroupItemIndex then
                iDeepIndex = iGroupItemIndex
                v3CurrentGroupDeepPoint = tbItem["v3Position"]
            end
        end

        tbDeepInfo["iIndex"] = iDeepIndex
        tbDeepInfo["v3Position"] = v3CurrentGroupDeepPoint
        tbDeepInfo["iDistance"] = m_iWallLineDistance
        tbDeepInfo["iGroupCount"] = #group
        tbPositions[groupIndex] = tbDeepInfo
    end

    return tbPositions
end

-- 得到当前组最深的点
function MapManager:GetDeepPoint(iGroup)
    local tbGroupItem = nil
    local index = nil

    for i, v in ipairs(self.m_tbPointGroups[iGroup]) do
        if not v["bFill"] then
            tbGroupItem = v
            index = i
            break
        end
    end

    return tbGroupItem, index
end

-- 当前组是否填满
function MapManager:IsGroupFull(iGroup)
    local bResult = true

    for i, v in ipairs(self.m_tbPointGroups[iGroup]) do
        if not v["bFill"] then
            bResult = false
            break
        end
    end

    return bResult
end


return MapManager
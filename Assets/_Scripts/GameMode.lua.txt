--[[    create by baihan 2020.02.25 
    游戏的总控制
--]]
local GemManager = require("Managers.GemManager")
local MapManager = require("Managers.MapManager")
local UiSystem = require("Ui.UiSystem")
local RuleSystem = require("System.RuleSystem")
local State = require("BaseClass.StateMachine.State")
local StateMachine = require("BaseClass.StateMachine.StateMachine")

local GameMode = Class("GameMode")

GameMode.m_scrGemManager = nil
GameMode.m_scrMapManager = nil
GameMode.m_scrRuleSystem = nil
GameMode.m_scrUiSystem = nil

-- 关卡
GameMode.m_iTotalLevelCount = 3
GameMode.m_iCurrentLevel = 1

-- 是否重建地图
GameMode.m_bIsRebuildMap = false

-- 是否删除所有宝石
GameMode.m_bClearAllGem = false

-- 状态机
GameMode.m_stateMachine = nil
GameMode.m_scrBuildState = nil
GameMode.m_scrFallState = nil
GameMode.m_scrCheckState = nil
GameMode.m_scrEndState = nil

local m_gameMode = nil

function Awake()
    m_gameMode = GameMode.New()

    GTime:Reset()
end

-- function Start()
-- end
-- function Enable()
-- end
-- function Disable()
-- end
function OnAppPause(pause)
    if pause then
        print("On application pause")
    else
        print("On appcation resume")
    end
end

function Update()
    GTime:Update()
    m_gameMode.m_stateMachine:Tick()
end

function OnDestroy()
    print("GameMode Destroy")
end

----------------------------------------------------------------------
function GameMode:ctor()
    self.m_scrGemManager = GemManager.New(objGemManager)
    self.m_scrMapManager = MapManager.New(objMapManager)
    self.m_scrRuleSystem = RuleSystem.New()

    self.m_scrUiSystem = UiSystem.New(objUiSystem, function()
        -- print("On click uplevel")
        self.m_bClearAllGem = true
        self.m_stateMachine:SwitchState(self.m_scrBuildState)
    end)
    self.m_bIsRebuildMap = true

    -- init state machine
    self.m_stateMachine = StateMachine.New()
    self.m_scrBuildState = State.New(
    function() self:BeginBuild() end,
    function() self:TickBuild() end,
    nil
    )
    self.m_scrCheckState = State.New(
    function() self:BeginCheck() end,
    function() self:TickCheck() end,
    nil
    )
    self.m_scrFallState = State.New(
    function() self:BeginFall() end,
    function() self:TickFall() end,
    nil
    )
    self.m_scrEndState = State.New(
    function() self:BeginEndState() end,
    nil,
    nil
    )
    self.m_stateMachine:SwitchState(self.m_scrBuildState)
end

function GameMode:UpdateUi()
    self.m_scrUiSystem:UpdateUi(self.m_scrRuleSystem.m_iCurrentDiamondCount, self.m_scrRuleSystem:GetTotalDiamond(), 0, self.m_iCurrentLevel)
end

----------------------------------------------------------------------
function GameMode:BeginBuild()
    -- update diamond
    self:UpdateUi()

    -- print("begin Build")
    -- 是否重新创建关卡
    if self.m_bIsRebuildMap then
        self.m_bIsRebuildMap = false
        self.m_scrMapManager:UpdateMap(self.m_iCurrentLevel)
        -- print("-------------- rebuild: level " .. self.m_iCurrentLevel)
    end

    -- 创建砖石
    if self.m_bClearAllGem then
        self.m_scrGemManager:ClearAllGem()
        self.m_bClearAllGem = false
    end
    local tbNotFullLevelData = self.m_scrMapManager:GetAllNotFullGroupIndexese(true)
    -- PrintTable(tbNotFullLevelData)
    self.m_scrGemManager:CreateGem(tbNotFullLevelData, #self.m_scrMapManager.m_tbPointGroups)
    -- self.m_scrMapManager:FillAll(true)
end


function GameMode:TickBuild()
    self.m_stateMachine:SwitchState(self.m_scrFallState)
end

----------------------------------------------------------------------
function GameMode:BeginFall()
    -- print("begin fall")
    self.m_scrRuleSystem:FallGem(self.m_scrMapManager, self.m_scrGemManager)

    -- move gems
    self.iGemFallingTime = 0
end

-- 砖石下落的时间
GameMode.iGemFallingTime = 0
local iTotalGemFallingTime = 2
function GameMode:TickFall()
    if self.iGemFallingTime > iTotalGemFallingTime then
        self.m_stateMachine:SwitchState(self.m_scrCheckState)
    else
        self.iGemFallingTime = self.iGemFallingTime + Utime.deltaTime
    end
end

----------------------------------------------------------------------
GameMode.m_bNeedFall = false
function GameMode:BeginCheck()
    -- print("Begin check")
    self.m_bNeedFall = self.m_scrRuleSystem:CheckLink(self.m_iCurrentLevel, self.m_scrGemManager, self.m_scrMapManager)
    self:UpdateUi()
end

function GameMode:TickCheck()
    if self.m_bNeedFall then
        self.m_stateMachine:SwitchState(self.m_scrFallState)
    elseif self.m_scrRuleSystem:IsClearLevel() then
        self.m_stateMachine:SwitchState(self.m_scrEndState)
    else
        self.m_stateMachine:SwitchState(self.m_scrBuildState)
    end
end

----------------------------------------------------------------------
function GameMode:BeginEndState()
    print("game end")
    self.m_scrRuleSystem:Reset()
    self.m_bIsRebuildMap = true
    self.m_bClearAllGem = true
    if self.m_iCurrentLevel >= self.m_iTotalLevelCount then
        self.m_iCurrentLevel = 1
    else
        self.m_iCurrentLevel = self.m_iCurrentLevel + 1
    end

    self.m_stateMachine:SwitchState(self.m_scrBuildState)
end

----------------------------------------------------------------------
return GameMode